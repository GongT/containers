name: "docker-registry"
on:
  workflow_dispatch:
    inputs:
      brandNew:
        type: boolean
        description: 跳过拉取上次构建结果
        required: false
        default: false
      forceDnf:
        type: boolean
        description: 强制运行dnf
        required: false
        default: false
      forceRebuild:
        type: boolean
        description: 强制全部重新构建，无视缓存
        required: false
        default: false
  schedule:
    - cron:  '47 4 5 * *'
  push:
    paths:
      - "docker-registry/**"
      - "!docker-registry/install-service.sh"
    #  - ".github/workflows/generated-build-docker-registry.yaml"
    #  - common
    branches:
      - master
env:
  AUTHOR: GongT <admin@gongt.me>
  NODE_ENV: production
  PROJECT_NAME: "docker-registry"
  GITHUB_ACTOR: ${{ github.actor }}
jobs:
  cancel:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: cancel running workflows
        timeout-minutes: 5
        uses: GongT/cancel-previous-workflows@6dd7af8389c9434cc893fd33b58609e73db49fbe
        env:
          DELETE: "yes"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: "生成镜像"
    runs-on: ubuntu-latest
    outputs:
      DOMAIN_ARRAY: ${{ steps.result.outputs.DOMAIN_ARRAY }}
    steps:
      - name: "强制清理项目（如果有）"
        timeout-minutes: 1
        shell: bash
        run: |
          if [[ -e ".git" ]]; then
            git reset --hard --recurse-submodule || true
            git clean -ffdx || true
            git submodule foreach bash -c "git clean -ffdx" || true
          fi

      - name: "获取代码"
        uses: actions/checkout@v3
        timeout-minutes: 1
        with:
          submodules: "recursive"
          clean: true
          fetch-depth: 2

      - name: "初始化登录信息和基本环境"
        shell: bash
        timeout-minutes: 2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SECRET_PASSWORD: ${{ secrets.SECRET_PASSWORD }}
        run: bash _scripts_/prepare-secrets.sh ghcr.io

      - name: "缓存下载和软件包数据"
        uses: pat-s/always-upload-cache@v3.0.11
        with:
          path: |
            ${{ env.SYSTEM_COMMON_CACHE }}/Download
            ${{ env.SYSTEM_COMMON_CACHE }}/golang
            ${{ env.SYSTEM_COMMON_CACHE }}/pip
            ${{ env.SYSTEM_COMMON_CACHE }}/nodejs
            ${{ env.SYSTEM_COMMON_CACHE }}/CCACHE
          key: common-cache-docker-registry-${{ hashFiles('docker-registry') }}
          restore-keys: |
            common-cache-docker-registry
            common-cache-

      # - name: "从ghcr.io获取上次生成的镜像"
      #   shell: bash
      #   if: github.event.inputs.brandNew == ''
      #   timeout-minutes: 1
      #   run: ./_scripts_/retry.sh podman pull "docker://ghcr.io/gongt/$PROJECT_NAME"


      - env:
          BUILDAH_FORCE: ${{ github.event.inputs.forceRebuild }}
          FORCE_DNF: ${{ github.event.inputs.forceDnf }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          _BUILDSCRIPT_RUN_STEP_: docker-registry:1
        id: step_1
        name: '运行构建过程: 安装依赖'
        run: bash _scripts_/ci-single-build.sh "$docker-registry:$1"
        shell: bash
        timeout-minutes: 5
      - env:
          BUILDAH_FORCE: ${{ github.event.inputs.forceRebuild }}
          FORCE_DNF: ${{ github.event.inputs.forceDnf }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          _BUILDSCRIPT_RUN_STEP_: docker-registry:2
        id: step_2
        name: '运行构建过程: 复制registry.gongt.me/gongt/init'
        run: bash _scripts_/ci-single-build.sh "$docker-registry:$2"
        shell: bash
        timeout-minutes: 5
      - env:
          BUILDAH_FORCE: ${{ github.event.inputs.forceRebuild }}
          FORCE_DNF: ${{ github.event.inputs.forceDnf }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          _BUILDSCRIPT_RUN_STEP_: docker-registry:3
        id: step_3
        name: '运行构建过程: 复制文件'
        run: bash _scripts_/ci-single-build.sh "$docker-registry:$3"
        shell: bash
        timeout-minutes: 5
      - env:
          BUILDAH_FORCE: ${{ github.event.inputs.forceRebuild }}
          FORCE_DNF: ${{ github.event.inputs.forceDnf }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          _BUILDSCRIPT_RUN_STEP_: docker-registry:4
        id: step_4
        name: '运行构建过程: No Name Stage'
        run: bash _scripts_/ci-single-build.sh "$docker-registry:$4"
        shell: bash
        timeout-minutes: 5
      - env:
          BUILDAH_FORCE: ${{ github.event.inputs.forceRebuild }}
          FORCE_DNF: ${{ github.event.inputs.forceDnf }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          _BUILDSCRIPT_RUN_STEP_: docker-registry:5
        id: step_5
        name: '运行构建过程: Finalize'
        run: bash _scripts_/ci-single-build.sh "$docker-registry:$5"
        shell: bash
        timeout-minutes: 5

      - id: result
        name: "输出状态"
        shell: bash
        env:
          SECRET_PASSWORD: ${{ secrets.SECRET_PASSWORD }}
        run: bash _scripts_/publish_create_index.sh

  publish:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        domain: ${{ fromJson(needs.build.outputs.DOMAIN_ARRAY) }}
      fail-fast: false
    steps:
      - name: "获取代码"
        uses: actions/checkout@v3
        timeout-minutes: 1
        with:
          submodules: "recursive"
          clean: true
          fetch-depth: 2

      - name: "初始化登录信息和基本环境"
        shell: bash
        timeout-minutes: 2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SECRET_PASSWORD: ${{ secrets.SECRET_PASSWORD }}
        run: bash _scripts_/prepare-secrets.sh ${{ matrix.domain }}

      - name: "发布镜像"
        timeout-minutes: 5
        shell: bash
        env:
          SECRET_PASSWORD: ${{ secrets.SECRET_PASSWORD }}
        run: bash _scripts_/publish_all_targets.sh ${{ matrix.domain }}
